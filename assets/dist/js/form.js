/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./assets/src/js/Form.js":
/*!*******************************!*\
  !*** ./assets/src/js/Form.js ***!
  \*******************************/
/***/ (() => {

eval("class Form {\n  constructor() {\n    this.onLoad();\n  }\n\n  /**\n   * ロード時のイベント\n   */\n  onLoad() {\n    window.addEventListener(\"load\", () => {\n      this.pdfTypes = document.querySelectorAll(\".pdf_types\");\n      this.bgTypesWrap = document.querySelector(\".bg_type_wrap\");\n      this.bgTypes = document.querySelectorAll(\".bg_types\");\n      this.title = document.querySelector(\".title\");\n      this.subCatch = document.querySelector(\".sub_catch\");\n      this.mainCatch = document.querySelector(\".main_catch\");\n      this.noticeText = document.querySelector(\".notice_text\");\n      this.detailItemDate = document.querySelector(\".detail_item_date\");\n      this.detailItemStartTime = document.querySelector(\".detail_item_start_time\");\n      this.detailItemEndTime = document.querySelector(\".detail_item_end_time\");\n      this.detailItemCapacity = document.querySelector(\".detail_item_capacity\");\n      this.detailItemPlace = document.querySelector(\".detail_item_place\");\n      this.detailItemPrice = document.querySelector(\".detail_item_price\");\n      this.listTitle = document.querySelector(\".list_title\");\n      this.lists = Array.from(document.querySelectorAll(\".list\")); // 配列にキャスト\n      this.message = document.querySelector(\".message\");\n      this.seminarText = document.querySelector(\".seminar_text\");\n      this.seminarUrl = document.querySelector(\".seminar_url\");\n      this.profileTitle = document.querySelector(\".profile_title\");\n      this.profileName = document.querySelector(\".profile_name\");\n      this.profileText = document.querySelector(\".profile_text\");\n      this.profileCompany = document.querySelector(\".contact_company\");\n      this.profileTel = document.querySelector(\".contact_tel\");\n      this.profileMail = document.querySelector(\".contact_mail\");\n      this.bgImage = document.querySelector(\".bg_image\");\n      this.bgSettingImage = document.querySelector(\".bg_setting_image\");\n      this.qrImage = document.querySelector(\".qr_image\");\n      this.profileImage = document.querySelector(\".profile_image\");\n      this.previewImage = document.querySelectorAll(\".preview_image\");\n      this.bgImageBtn = document.querySelector(\".bg_image_select\");\n      this.qrImageBtn = document.querySelector(\".qr_image_select\");\n      this.profileImageBtn = document.querySelector(\".profile_image_select\");\n      this.bgImageDeleteBtn = document.querySelector(\".bg_image_delete\");\n      this.qrImageDeleteBtn = document.querySelector(\".qr_image_delete\");\n      this.profileImageDeletBtn = document.querySelector(\".profile_image_delete\");\n      this.resetFormBt = document.querySelector(\".js-reset-form-bt\");\n      this.eventListener();\n    });\n  }\n\n  /**\n   * 各イベントをまとめる\n   */\n  eventListener() {\n    const nodeObjects = this.createNodeObjects();\n    const selectObjects = this.createSelectObjects();\n    const imageObjects = this.createImageObjects();\n    const sizeRangeObjects = this.createSizeRange();\n    const colorArray = this.createColorArray();\n\n    // init sessionStrage\n    selectObjects.map(e => this.initSessionStorageSelect(e));\n    nodeObjects.map(e => this.initSessionStorageText(e));\n    this.lists.map(e => this.initSessionStorageText(e));\n    imageObjects.map(e => this.initSessionStorageImage(e));\n    sizeRangeObjects.map(e => this.initSessionStorageRange(e));\n    colorArray.map(e => this.initSessionStorageColor(e));\n    this.initImagePreview();\n    this.initSizeRange();\n    this.initThemeColor();\n    selectObjects.map(e => this.selectTypes(e));\n    nodeObjects.map(e => this.handleFormChange(e));\n    this.lists.map(e => this.handleFormChange(e));\n    this.resetForm();\n  }\n\n  /**\n   * nodeを代入している変数を配列化\n   * @return {Array} nodeの配列\n   */\n  createNodeObjects() {\n    return [this.title, this.subCatch, this.mainCatch, this.noticeText, this.detailItemDate, this.detailItemStartTime, this.detailItemEndTime, this.detailItemCapacity, this.detailItemPlace, this.detailItemPrice, this.listTitle, this.message, this.seminarText, this.seminarUrl, this.profileTitle, this.profileName, this.profileText, this.profileCompany, this.profileTel, this.profileMail];\n  }\n  createColorArray() {\n    return [\"main_color\", \"sub_color\"];\n  }\n\n  /**\n   * 画像用に配列オブジェクト生成\n   * @return {Array} オブジェクト配列\n   */\n  createImageObjects() {\n    return [{\n      ele: this.bgImage,\n      preview: \"bg\"\n    }, {\n      ele: this.qrImage,\n      preview: \"qr\"\n    }, {\n      ele: this.profileImage,\n      preview: \"profile\"\n    }];\n  }\n\n  /**\n   * セレクト用に配列オブジェクト生成\n   * @return {Array} オブジェクト配列\n   */\n  createSelectObjects() {\n    return [{\n      ele: this.pdfTypes,\n      type: \"pdf\"\n    }, {\n      ele: this.bgTypes,\n      type: \"bg\"\n    }];\n  }\n  createSizeRange() {\n    return [{\n      ele: \"notice_text_size\",\n      type: \"notice_size\"\n    }, {\n      ele: \"detail_item_place_text_size\",\n      type: \"place_size\"\n    }, {\n      ele: \"contact_company_text_size\",\n      type: \"company_size\"\n    }, {\n      ele: \"contact_mail_text_size\",\n      type: \"main_size\"\n    }];\n  }\n\n  /**\n   * ラジオボタンセレクトを検知\n   * @return {Object} object - ラジオボタン要素のオブジェクト\n   */\n  selectTypes(object) {\n    const opapType = document.querySelector(`.opap_${object.type}_type`);\n    object.ele.forEach(e => {\n      if (e.checked) opapType.value = e.value; // select type init\n      e.addEventListener(\"change\", e => {\n        // typeの変更をハンドリング\n        opapType.value = e.target.value;\n        this.setSessionStorage(`${object.type}_type`, e.target.value);\n        // 選択状態によってリストの表示非表示設定\n        if (object.type === \"pdf\") {\n          this.settingShowList(e.target.value === \"a\" ? \"none\" : \"block\");\n          this.message.rows = e.target.value === \"a\" ? \"4\" : \"2\";\n        }\n        if (object.type === \"bg\") {\n          this.bgSettingImage.setAttribute(\"src\", e.target.value);\n        }\n      });\n    });\n\n    // リストの初期表示設定\n    if (object.type === \"pdf\") {\n      this.settingShowList(opapType.value === \"a\" ? \"none\" : \"block\");\n      this.message.rows = opapType.value === \"a\" ? \"4\" : \"2\";\n    }\n    if (object.type === \"bg\") {\n      this.bgSettingImage.setAttribute(\"src\", opapType.value);\n    }\n  }\n\n  /**\n   * 入力を検知\n   *\n   * @param {Object} object - 検知対象のオブジェクト\n   */\n  handleFormChange(node) {\n    node.addEventListener(\"change\", e => {\n      document.querySelector(`.opap_${node.name}`).value = e.target.value;\n      this.setSessionStorage(node.name, e.target.value);\n    });\n    node.addEventListener(\"keyup\", e => {\n      document.querySelector(`.opap_${node.name}`).value = e.target.value;\n      this.setSessionStorage(node.name, e.target.value);\n    });\n  }\n\n  /**\n   * input file周りの処理\n   */\n  initImagePreview() {\n    const imageObjects = this.createImageObjects();\n\n    // input fileのclick eventを登録\n    this.bgImageBtn.addEventListener(\"click\", () => imageObjects[0].ele.click());\n    this.qrImageBtn.addEventListener(\"click\", () => imageObjects[1].ele.click());\n    this.profileImageBtn.addEventListener(\"click\", () => imageObjects[2].ele.click());\n    this.bgImageDeleteBtn.addEventListener(\"click\", () => this.deleteMedia(imageObjects, 0));\n    this.qrImageDeleteBtn.addEventListener(\"click\", () => this.deleteMedia(imageObjects, 1));\n    this.profileImageDeletBtn.addEventListener(\"click\", () => this.deleteMedia(imageObjects, 2));\n    imageObjects.forEach(obj => {\n      obj.ele.addEventListener(\"change\", e => {\n        const file = e.target.files[0];\n        const fileReader = new FileReader();\n        fileReader.readAsDataURL(file);\n        fileReader.addEventListener(\"load\", e => {\n          if (document.querySelector(`.${obj.preview}_preview .preview_image`) === null) {\n            const imgElm = document.createElement(\"img\");\n            imgElm.className = \"preview_image\";\n            imgElm.src = e.target.result; // e.target.resultに読み込んだ画像のURLが入っている\n            const targetElm = document.querySelector(`.${obj.preview}_preview`);\n            targetElm.appendChild(imgElm);\n            document.querySelector(`.${obj.preview}_image_delete`).style.display = \"inline-block\";\n          } else {\n            // 既に画像が登録されている場合に上書き\n            const previewImage = document.querySelector(`.${obj.preview}_preview .preview_image`);\n            previewImage.setAttribute(\"src\", e.target.result);\n          }\n          if (obj.preview === \"bg\") {\n            this.bgTypesWrap.style.display = \"none\";\n            this.bgSettingImage.style.display = \"none\";\n          }\n          document.querySelector(`.opap_${obj.preview}_img`).value = e.target.result;\n          this.setSessionStorage(obj.preview, e.target.result);\n          this.setSessionStorage(`${obj.preview}_img`, file.name);\n        });\n      });\n    });\n  }\n  initSizeRange() {\n    const sizeRanges = this.createSizeRange();\n    sizeRanges.forEach(item => {\n      document.querySelector(`.${item.ele}`).addEventListener(\"change\", () => {\n        const rangeValue = document.querySelector(`.${item.ele}`).value;\n        this.setSessionStorage(item.type, rangeValue);\n        document.querySelector(`.opap_${item.ele}`).value = rangeValue;\n      });\n    });\n  }\n  initThemeColor() {\n    const themeColors = this.createColorArray();\n    themeColors.forEach(ele => {\n      document.querySelector(`.${ele}`).addEventListener(\"change\", () => {\n        const colorCode = document.querySelector(`.${ele}`).value;\n        this.setSessionStorage(ele, colorCode);\n        document.querySelector(`.opap_${ele}`).value = colorCode;\n      });\n    });\n  }\n\n  /**\n   * タイプによってリストの表示数を変更\n   *\n   * @param {string} status - cssで設定する状態\n   */\n  settingShowList(status) {\n    const handleListIndexs = [\"07\", \"08\", \"09\", \"10\"];\n    handleListIndexs.forEach(e => document.querySelector(`.list_${e}`).style.display = status);\n  }\n\n  /**\n   * メディア削除時の処理\n   *\n   * @param {object} imageobjects - 画像の設定配列オブジェクト\n   * @param {number} index - 配列のindex指定\n   */\n  deleteMedia(imageObjects, index) {\n    document.querySelector(`.${imageObjects[index].preview}_preview .preview_image`).remove();\n    document.querySelector(`.opap_${imageObjects[index].preview}_img`).value = \"\";\n    document.querySelector(`.${imageObjects[index].preview}_image`).value = \"\";\n    document.querySelector(`.${imageObjects[index].preview}_image_delete`).style.display = \"none\";\n    /**\n     * if.\n     *\n     * @param {} index\n     */\n    if (index === 0) {\n      document.querySelector(`.${imageObjects[index].preview}_type_wrap`).style.display = \"block\";\n      this.bgSettingImage.style.display = \"block\";\n    }\n  }\n\n  /**\n   * sessionStrageに入力値を保存\n   * 画像は容量の問題でstorageに含めない\n   *\n   * @param {String} key - nodeのname\n   * @param {String} value - 値\n   * @return {Object} sessionStrageのデータ\n   */\n  setSessionStorage(key, value) {\n    if (key !== \"bg\" && key !== \"qr\" && key !== \"profile\") return sessionStorage.setItem(key, value);\n  }\n  initSessionStorageSelect(object) {\n    object.ele.forEach(e => {\n      if (e.value === sessionStorage.getItem(`${object.type}_type`)) {\n        e.checked = true;\n        document.querySelector(`.opap_${object.type}_type`).value = e.value;\n      }\n    });\n  }\n\n  /**\n   * sessionStrageに入っているテキストをフォームに返す\n   *\n   * @param {Object} node - 対象のnode\n   */\n  initSessionStorageText(node) {\n    document.querySelector(`.${node.name}`).value = sessionStorage.getItem(node.name) !== null ? sessionStorage.getItem(node.name) : \"\";\n    document.querySelector(`.opap_${node.name}`).value = sessionStorage.getItem(node.name) !== null ? sessionStorage.getItem(node.name) : \"\";\n  }\n  initSessionStorageRange(obj) {\n    document.querySelector(`.${obj.ele}`).value = sessionStorage.getItem(obj.type) !== null ? sessionStorage.getItem(obj.type) : \"\";\n    document.querySelector(`.opap_${obj.ele}`).value = sessionStorage.getItem(obj.type) !== null ? sessionStorage.getItem(obj.type) : \"\";\n  }\n  initSessionStorageColor(ele) {\n    document.querySelector(`.${ele}`).value = sessionStorage.getItem(ele) !== null ? sessionStorage.getItem(ele) : \"\";\n    document.querySelector(`.opap_${ele}`).value = sessionStorage.getItem(ele) !== null ? sessionStorage.getItem(ele) : \"\";\n  }\n\n  /**\n   * sessionStrageに入っている画像をフォームに返す\n   * @param {Object} obj - 画像の設定オブジェクト\n   */\n  initSessionStorageImage(obj) {\n    if (sessionStorage.getItem(obj.preview) !== null) {\n      const imgElm = document.createElement(\"img\");\n      imgElm.className = \"preview_image\";\n      imgElm.src = sessionStorage.getItem(obj.preview);\n      const targetElm = document.querySelector(`.${obj.preview}_preview`);\n      targetElm.appendChild(imgElm);\n      document.querySelector(`.opap_${obj.preview}_img`).value = sessionStorage.getItem(obj.preview);\n      document.querySelector(`.${obj.preview}_image_delete`).style.display = \"inline-block\";\n    }\n  }\n\n  /**\n   * 全体削除時の処理\n   */\n  resetForm() {\n    this.resetFormBt.addEventListener(\"click\", () => {\n      sessionStorage.clear();\n      this.createNodeObjects().map(e => {\n        document.querySelector(`.opap_${e.name}`).value = \"\";\n        e.value = \"\";\n      });\n      this.lists.map(e => {\n        document.querySelector(`.opap_${e.name}`).value = \"\";\n        e.value = \"\";\n      });\n      this.createImageObjects().forEach(obj => {\n        document.querySelector(`.opap_${obj.preview}_img`).value = \"\";\n        document.querySelector(`.${obj.preview}_image_delete`).style.display = \"none\";\n      });\n      if (this.previewImage) {\n        this.previewImage.forEach(ele => ele.remove());\n      }\n    });\n  }\n}\nconst form = new Form();\n\n//# sourceURL=webpack://output-post-as-pdf/./assets/src/js/Form.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./assets/src/js/Form.js"]();
/******/ 	
/******/ })()
;